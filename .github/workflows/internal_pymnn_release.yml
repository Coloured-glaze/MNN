name: internal_pymnn_release
on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version'
        default: '3.10'
        required: true
        type: string
      build_options:
        description: 'Build options (comma-separated): cuda, opencl, vulkan, openmp, trt, torch, internal, render, no_sse, cuda_tune'
        default: 'llm'
        required: false
        type: string
      install_cuda:
        description: 'Install CUDA on Windows'
        required: true
        type: choice
        options:
          - '1'
          - '0'
        default: '0'

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest,    arch: x86_64 }
          - { os: ubuntu-22.04-arm, arch: aarch64 }
          - { os: windows-latest,   arch: AMD64 }

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: using msvc
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Install CUDA on Windows
      if: matrix.os == 'windows-latest' && inputs.install_cuda == '1'
      run: |
        # Download CUDA installer
        $cudaVersion = "12.1.1"
        $cudaInstaller = "cuda_${cudaVersion}_531.14_windows.exe"
        $cudaUrl = "https://developer.download.nvidia.com/compute/cuda/${cudaVersion}/local_installers/${cudaInstaller}"
        
        Write-Host "Downloading CUDA installer from $cudaUrl"
        Invoke-WebRequest -Uri $cudaUrl -OutFile $cudaInstaller
        
        # Install CUDA silently
        Write-Host "Installing CUDA..."
        Start-Process -FilePath $cudaInstaller -ArgumentList "-s" -Wait
        
        # Set CUDA environment variables
        $cudaPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v${cudaVersion}"
        [Environment]::SetEnvironmentVariable("CUDA_PATH", $cudaPath, "Machine")
        [Environment]::SetEnvironmentVariable("CUDA_HOME", $cudaPath, "Machine")
        $cudaBinPath = "$cudaPath\bin"
        [Environment]::SetEnvironmentVariable("Path", $env:Path + ";$cudaBinPath", "Machine")
        
        # Verify installation
        nvcc --version
        
        Write-Host "CUDA installation completed"
      shell: powershell

    - name: using private schema patch
      if: matrix.os != 'windows-latest'
      env:
        PATCH_CONTENT: ${{ secrets.PRIVATE_SCHEMA_PATCH }}
      run: |
        patch_file=$(mktemp schema_patch.XXXXXX.diff)
        echo "$PATCH_CONTENT" > $patch_file
        git apply $patch_file
        rm $patch_file
        git status
        cd schema
        ls -lh
        ./generate.sh
        cd ..
        git status
    - name: using private schema patch
      if: matrix.os == 'windows-latest'
      env:
        PATCH_CONTENT: ${{ secrets.PRIVATE_SCHEMA_PATCH }}
      run: |
        $patchFile = [System.IO.Path]::GetTempFileName() + ".diff"
        [System.IO.File]::WriteAllText($patchFile, $env:PATCH_CONTENT)
        git apply $patchFile
        Remove-Item $patchFile
        git status
        Push-Location schema
        Get-ChildItem -Name
        ./generate.ps1
        Set-Location ..
        git status
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python_version }}

    - name: install pipx
      if: matrix.os == 'macos-14'
      run: python -m pip install pipx

    - name: Set Python version for cibuildwheel
      run: |
        PYTHON_VERSION="${{ inputs.python_version }}"
        PYTHON_VERSION_MAJMIN="$(echo "${PYTHON_VERSION}" | cut -d '.' -f-2)"
        PYTHON_VERSION_MAJMIN_NODOT="${PYTHON_VERSION_MAJMIN//./}"
        echo "PYTHON_VERSION_MAJMIN_NODOT=${PYTHON_VERSION_MAJMIN_NODOT}" >> $GITHUB_ENV
        
        # Set build pattern based on OS
        if [[ "${{ matrix.os }}" == *"windows"* ]]; then
          echo "CIBW_BUILD=cp${PYTHON_VERSION_MAJMIN_NODOT}-*" >> $GITHUB_ENV
        elif [[ "${{ matrix.os }}" == *"ubuntu"* ]]; then
          echo "CIBW_BUILD=cp${PYTHON_VERSION_MAJMIN_NODOT}-manylinux*" >> $GITHUB_ENV
        else
          echo "CIBW_BUILD=cp${PYTHON_VERSION_MAJMIN_NODOT}-*" >> $GITHUB_ENV
        fi
        
        echo "Python version: ${PYTHON_VERSION}"
        echo "Python version for cibuildwheel: ${CIBW_BUILD}"
      shell: bash

    - name: Process build options
      id: build_options
      run: |
        import os
        import sys
        
        # Get build options from input
        build_options = "${{ inputs.build_options }}"
        
        # Convert comma-separated options to space-separated
        build_args = build_options.replace(',', ' ')
        
        # Ensure llm is always included
        if "llm" not in build_args:
            build_args = f"{build_args} llm"
        
        # Remove leading/trailing spaces
        build_args = build_args.strip()
        
        # Set output for later steps
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"build_args={build_args}\n")
        
        print(f"Build options: {build_options}")
        print(f"Build args: {build_args}")
      shell: python

    - name: Get version from git tag
      id: get_version
      run: |
        # Try to get the latest tag
        TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$TAG" ]; then
          VERSION="1.0.0"
          echo "No git tag found, using default version: $VERSION"
        else
          # Remove 'v' prefix if present
          VERSION=${TAG#v}
          echo "Found git tag: $TAG, using version: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.21.3
      env:
        CIBW_ARCHS_MACOS: ${{ matrix.arch }}
        CIBW_ARCHS_LINUX: ${{ matrix.arch }}
        CIBW_ARCHS_WINDOWS: ${{ matrix.arch }}
        CIBW_BUILD: ${{ env.CIBW_BUILD }}
        CIBW_BUILD_VERBOSITY: 1
        CIBW_ENVIRONMENT: CMAKE_BUILD_PARALLEL_LEVEL=2 MNN_VERSION=${{ steps.get_version.outputs.version }} BUILD_ARGS="${{ steps.build_options.outputs.build_args }}"
      with:
        package-dir: pymnn/pip_package
        output-dir: wheelhouse
        config-file: "{package}/pyproject.toml"

    - name: Show files
      run: ls -lh wheelhouse
      shell: bash

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: artifact-${{ matrix.os }}-${{ matrix.arch }}
        path: wheelhouse/*.whl
